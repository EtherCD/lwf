import lwf from "../src"
import assert from "assert"

const object = {
    int: -4503599627370494,
    uint: 9007199254740990,
    floatFe: 56294995.3421312,
    double: 5629499.5342131210001,
    bigInt: BigInt(2 ** 128) - 1n,
    string: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sodales dolor quis nisi tincidunt, id gravida neque ornare. Donec sodales tempus metus, et iaculis libero interdum eu. Suspendisse ac neque quis lectus porttitor gravida sit amet blandit neque. Nunc iaculis mollis ex, nec gravida nunc imperdiet et. Praesent non pretium. ",
    array: [
        -4503599627370494,
        9007199254740990,
        56294995.3421312,
        5629499.5342131210001,
        BigInt(2 ** 128) - 1n,
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas sodales dolor quis nisi tincidunt, id gravida neque ornare. Donec sodales tempus metus, et iaculis libero interdum eu. Suspendisse ac neque quis lectus porttitor gravida sit amet blandit neque. Nunc iaculis mollis ex, nec gravida nunc imperdiet et. Praesent non pretium. "
    ]
}

const schema = new lwf.Schema({
    a: {
        fields: ["int", "uint", "floatFe", "double", "bigInt", "string"],
        nested: ["ar"]
    },
    ar: {
        key: "array",
        isArray: true
    }
})

const buffer = new Uint8Array([
    0x00, 0x00, 0xfb, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x0e, 0x87, 0x87,
    0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x0e, 0x05, 0x80, 0xff, 0xfe, 0xfe,
    0xfe, 0xfe, 0x7e, 0x07, 0x04, 0x45, 0x55, 0xe6, 0x3b, 0x88, 0xc2, 0x30,
    0xec, 0x01, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
    0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x02, 0xff, 0xda, 0x00,
    0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75, 0x6d, 0x20,
    0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20, 0x61, 0x6d,
    0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63, 0x74, 0x65,
    0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73, 0x63, 0x69,
    0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x2e, 0x20, 0x4d, 0x61, 0x65,
    0x63, 0x65, 0x6e, 0x61, 0x73, 0x20, 0x73, 0x6f, 0x64, 0x61, 0x6c, 0x65,
    0x73, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x71, 0x75, 0x69, 0x73,
    0x20, 0x6e, 0x69, 0x73, 0x69, 0x20, 0x74, 0x69, 0x6e, 0x63, 0x69, 0x64,
    0x75, 0x6e, 0x74, 0x2c, 0x20, 0x69, 0x64, 0x20, 0x67, 0x72, 0x61, 0x76,
    0x69, 0x64, 0x61, 0x20, 0x6e, 0x65, 0x71, 0x75, 0x65, 0x20, 0x6f, 0x72,
    0x6e, 0x61, 0x72, 0x65, 0x2e, 0x20, 0x44, 0x6f, 0x6e, 0x65, 0x63, 0x20,
    0x73, 0x6f, 0x64, 0x61, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x65, 0x6d, 0x70,
    0x75, 0x73, 0x20, 0x6d, 0x65, 0x74, 0x75, 0x73, 0x2c, 0x20, 0x65, 0x74,
    0x20, 0x69, 0x61, 0x63, 0x75, 0x6c, 0x69, 0x73, 0x20, 0x6c, 0x69, 0x62,
    0x65, 0x72, 0x6f, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x64, 0x75, 0x6d,
    0x20, 0x65, 0x75, 0x2e, 0x20, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64,
    0x69, 0x73, 0x73, 0x65, 0x20, 0x61, 0x63, 0x20, 0x6e, 0x65, 0x71, 0x75,
    0x65, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20, 0x6c, 0x65, 0x63, 0x74, 0x75,
    0x73, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x74, 0x69, 0x74, 0x6f, 0x72, 0x20,
    0x67, 0x72, 0x61, 0x76, 0x69, 0x64, 0x61, 0x20, 0x73, 0x69, 0x74, 0x20,
    0x61, 0x6d, 0x65, 0x74, 0x20, 0x62, 0x6c, 0x61, 0x6e, 0x64, 0x69, 0x74,
    0x20, 0x6e, 0x65, 0x71, 0x75, 0x65, 0x2e, 0x20, 0x4e, 0x75, 0x6e, 0x63,
    0x20, 0x69, 0x61, 0x63, 0x75, 0x6c, 0x69, 0x73, 0x20, 0x6d, 0x6f, 0x6c,
    0x6c, 0x69, 0x73, 0x20, 0x65, 0x78, 0x2c, 0x20, 0x6e, 0x65, 0x63, 0x20,
    0x67, 0x72, 0x61, 0x76, 0x69, 0x64, 0x61, 0x20, 0x6e, 0x75, 0x6e, 0x63,
    0x20, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x64, 0x69, 0x65, 0x74, 0x20, 0x65,
    0x74, 0x2e, 0x20, 0x50, 0x72, 0x61, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x20,
    0x6e, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x74, 0x69, 0x75, 0x6d, 0x2e,
    0x20, 0x01, 0x06, 0x00, 0xfb, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x0e,
    0x87, 0x87, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x0e, 0x05, 0x80, 0xff,
    0xfe, 0xfe, 0xfe, 0xfe, 0x7e, 0x07, 0x04, 0x45, 0x55, 0xe6, 0x3b, 0x88,
    0xc2, 0x30, 0xec, 0x01, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe,
    0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x02, 0xff,
    0xda, 0x00, 0x4c, 0x6f, 0x72, 0x65, 0x6d, 0x20, 0x69, 0x70, 0x73, 0x75,
    0x6d, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x73, 0x69, 0x74, 0x20,
    0x61, 0x6d, 0x65, 0x74, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x63,
    0x74, 0x65, 0x74, 0x75, 0x72, 0x20, 0x61, 0x64, 0x69, 0x70, 0x69, 0x73,
    0x63, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x6c, 0x69, 0x74, 0x2e, 0x20, 0x4d,
    0x61, 0x65, 0x63, 0x65, 0x6e, 0x61, 0x73, 0x20, 0x73, 0x6f, 0x64, 0x61,
    0x6c, 0x65, 0x73, 0x20, 0x64, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x71, 0x75,
    0x69, 0x73, 0x20, 0x6e, 0x69, 0x73, 0x69, 0x20, 0x74, 0x69, 0x6e, 0x63,
    0x69, 0x64, 0x75, 0x6e, 0x74, 0x2c, 0x20, 0x69, 0x64, 0x20, 0x67, 0x72,
    0x61, 0x76, 0x69, 0x64, 0x61, 0x20, 0x6e, 0x65, 0x71, 0x75, 0x65, 0x20,
    0x6f, 0x72, 0x6e, 0x61, 0x72, 0x65, 0x2e, 0x20, 0x44, 0x6f, 0x6e, 0x65,
    0x63, 0x20, 0x73, 0x6f, 0x64, 0x61, 0x6c, 0x65, 0x73, 0x20, 0x74, 0x65,
    0x6d, 0x70, 0x75, 0x73, 0x20, 0x6d, 0x65, 0x74, 0x75, 0x73, 0x2c, 0x20,
    0x65, 0x74, 0x20, 0x69, 0x61, 0x63, 0x75, 0x6c, 0x69, 0x73, 0x20, 0x6c,
    0x69, 0x62, 0x65, 0x72, 0x6f, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x64,
    0x75, 0x6d, 0x20, 0x65, 0x75, 0x2e, 0x20, 0x53, 0x75, 0x73, 0x70, 0x65,
    0x6e, 0x64, 0x69, 0x73, 0x73, 0x65, 0x20, 0x61, 0x63, 0x20, 0x6e, 0x65,
    0x71, 0x75, 0x65, 0x20, 0x71, 0x75, 0x69, 0x73, 0x20, 0x6c, 0x65, 0x63,
    0x74, 0x75, 0x73, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x74, 0x69, 0x74, 0x6f,
    0x72, 0x20, 0x67, 0x72, 0x61, 0x76, 0x69, 0x64, 0x61, 0x20, 0x73, 0x69,
    0x74, 0x20, 0x61, 0x6d, 0x65, 0x74, 0x20, 0x62, 0x6c, 0x61, 0x6e, 0x64,
    0x69, 0x74, 0x20, 0x6e, 0x65, 0x71, 0x75, 0x65, 0x2e, 0x20, 0x4e, 0x75,
    0x6e, 0x63, 0x20, 0x69, 0x61, 0x63, 0x75, 0x6c, 0x69, 0x73, 0x20, 0x6d,
    0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x20, 0x65, 0x78, 0x2c, 0x20, 0x6e, 0x65,
    0x63, 0x20, 0x67, 0x72, 0x61, 0x76, 0x69, 0x64, 0x61, 0x20, 0x6e, 0x75,
    0x6e, 0x63, 0x20, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x64, 0x69, 0x65, 0x74,
    0x20, 0x65, 0x74, 0x2e, 0x20, 0x50, 0x72, 0x61, 0x65, 0x73, 0x65, 0x6e,
    0x74, 0x20, 0x6e, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x74, 0x69, 0x75,
    0x6d, 0x2e, 0x20
])

test("Testing decoding", () => {
    const encode = lwf.decode(buffer, schema)

    assert.deepEqual(encode, object)
})
